openapi: 3.0.0
info:
  title: Movie Quotes API
  description: API documentation of Movie Quotes API
  version: 0.1.9

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

servers:
  - url: http://localhost:4444
    description: local server
  - url: http://producation.app
    description: production server

paths:
  # Authentication

  /activate-account:
    get:
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: Check your email after registration and enter JWT token which you got
      tags:
        - Authentication
      description: Activate user account after registration with JWT token
      responses:
        '200':
          description: Account activated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Account activated successfully!
        '403':
          description: Provided JWT token is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Account activation failed. JWT token is invalid!
        '404':
          description: User account not found. User is not registered yet.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User is not registered yet!

  /verify-email:
    get:
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
          description: Enter your email address
      tags:
        - Authentication
      description: Verify email address and get email with JWT token
      responses:
        '200':
          description: Email verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Email verification link sent. Check your email.
        '404':
          description: User account with this email address not found. User is not registered yet.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User with this email is not registered yet.
        '422':
          description: Unprocessed Entity

  /activate-new-user-email:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: Enter JWT token you get via email
        - in: query
          name: userId
          required: true
          schema:
            type: string
          description: Enter user id
      tags:
        - Authentication
      description: Activate new user email
      responses:
        '200':
          description: New email activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User email changed successfully
        '401':
          description: User is not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User is not authorized
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User not found
        '422':
          description: Unprocessed Entity
        '500':
          description: Internal Server Error.

  /register-user:
    post:
      tags:
        - Authentication
      description: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: number
            example:
              name: 'john'
              email: 'john@gmail.com'
              password: 'password'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User registered successfully! Account verification link sent.
        '401':
          description: Email Couldn't be sent because mailing service api key is missing or is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Sendgrid api key is missing!
        '409':
          description: User already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User is already registered!
        '422':
          description: Unprocessed Entity
        '500':
          description: Internal Server Error.

  /google-auth:
    post:
      tags:
        - Authentication
      description: Authenticate with google account and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
            example:
              name: 'john'
              email: 'john@gmail.com'
      responses:
        '200':
          description: JWT token sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                example:
                  token: JWT token
        '422':
          description: Unprocessed Entity
        '500':
          description: Internal Server Error.

  /authorization:
    post:
      tags:
        - Authentication
      description: Log in ang get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: 'john@gmail.com'
              password: 'password'
      responses:
        '200':
          description: User logged in successfully. JWT token sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                example:
                  token: JWT token
        '401':
          description: User is not authorized to change password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User is not authorized to change password
        '403':
          description: Account is not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User can not log in because account is not verified yet
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User not found
        '422':
          description: Unprocessed Entity
        '500':
          description: Internal Server Error.

  # Users
  /user-details:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: accessToken
          required: true
          schema:
            type: string
          description: Enter access token which you got after authorization
      tags:
        - User
      description: Fetch user details
      responses:
        '200':
          description: User details fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                example:
                  _id: 62e9ec0df44f549d9b153423
                  name: elon musk
                  email: spacex@gmail.com
        '401':
          description: Provided JWT token is invalid.
        '404':
          description: User account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User not found
        '500':
          description: Internal Server Error.

  /change-password:
    post:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
            example:
              password: 'newpassword'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: JWT token
        '401':
          description: JWT token verification failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User is not authorized to change password. Token verification failed.
        '404':
          description: User account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User is not registered!
        '422':
          description: Unprocessed Entity
        '500':
          description: Internal Server Error.

  /upload-user-image:
    patch:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Upload user profile image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: string
                image:
                  type: string
                  format: binary
            example:
              id: '62cd66b2bc4b70708a73125f'
      responses:
        '201':
          description: User  image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User image uploaded successfully
        '401':
          description: User is not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User is not authorized
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User not found
        '422':
          description: Unprocessed Entity

  /change-user-credentials:
    put:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Change user credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                id:
                  type: string
            example:
              name: name
              email: example@gmail.com
              password: newpassword
              id: '62e934bdfc8d986260667984'
      responses:
        '200':
          description: credentials updated successfully
        '401':
          description: User is not authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User is not authorized
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User not found
        '422':
          description: Unprocessed Entity
        '500':
          description: Internal Server Error.

  # Movie
  /movie-genres:
    get:
      tags:
        - Movie
      description: Fetch movie genres
      responses:
        '200':
          description: Movie genres fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                [
                  'Adventure',
                  'Musicals',
                  'Romance',
                  'Fantasy',
                  'Romance',
                  'Mystery',
                  'Action',
                  'Comedy',
                  'Horror',
                  'Sports',
                  'Drama',
                ]

  /all-movies:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
          description: Enter mongodb id of certain user
      tags:
        - Movie
      description: Fetch all movies added by user
      responses:
        '200':
          description: Movies fetched successfully
        '401':
          description: User is not authorized
        '403':
          description: Authorization header does not include valid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Token is not valid
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User not found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Provided userId is invalid

  /add-movie:
    post:
      security:
        - bearerAuth: []
      tags:
        - Movie
      description: Add new movie
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movieNameEn:
                  type: string
                  example: Movie name
                movieNameGe:
                  type: string
                  example: ფილმის სახელი
                movieDescriptionEn:
                  type: string
                  example: Movie description
                movieDescriptionGe:
                  type: string
                  example: ფილმის აღწერა
                directorEn:
                  type: string
                  example: Director
                directorGe:
                  type: string
                  example: რეჟისორი
                budget:
                  type: number
                  example: 3200000
                userId:
                  type: string
                  example: 62e934bdfc8d986260667984
                movieGenres[]:
                  type: array
                  items:
                    type: string
                  example:
                    - Adventure
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Movie added successfully
        '409':
          description: Movie is already added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Movie is already added
        '422':
          description: Unprocessed Entity
        '500':
          description: Internal server error

  /change-movie:
    put:
      security:
        - bearerAuth: []
      tags:
        - Movie
      description: Change movie
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movieNameEn:
                  type: string
                  example: Movie name
                movieNameGe:
                  type: string
                  example: ფილმის სახელი
                movieDescriptionEn:
                  type: string
                  example: Movie description
                movieDescriptionGe:
                  type: string
                  example: ფილმის აღწერა
                directorEn:
                  type: string
                  example: Director
                directorGe:
                  type: string
                  example: რეჟისორი
                budget:
                  type: number
                  example: 3200000
                id:
                  type: string
                  example: 62e934bdfc8d986260667984
                movieGenres[]:
                  type: array
                  items:
                    type: string
                  example:
                    - Adventure
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Movie added successfully
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Movie not found
        '409':
          description: Movie is already added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Movie with this name is already added
        '422':
          description: Unprocessed Entity

  /delete-movie:
    delete:
      parameters:
        - in: query
          name: id
          schema:
            type: string
      security:
        - bearerAuth: []
      tags:
        - Movie
      description: Delete movie
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Movie deleted successfully
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Movie not found
        '422':
          description: Unprocessed Entity
